#! /usr/bin/env python

import sys
import os.path
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import subprocess
import urllib
import json
import pprint
import prettytable
import cli

URL = '/rest/api/latest'

class Gira(cli.Cli):
    def __init__(self, server):
        cli.Cli.__init__(self, history=True)

        self.server = server

        # Get a new cookie if needs be
        self.cookiepath = self.directory + '/cookie'
        if not os.path.exists(os.path.expanduser(self.cookiepath)):
            self.getcookie()

        # Arguments
        self.versionsparser.add_argument('project')

        self.componentsparser.add_argument('project')

        self.versionparser.add_argument('project')
        self.versionparser.add_argument('version')

        self.searchparser.add_argument('jql')

        # Sink for curl
        self.null = open(os.devnull, 'w')

    def getcookie(self):
        subprocess.call(['get-cookie', '-u',
                         self.server + '/login', '-o', self.cookiepath])

    def curl(self, res):
        def curl():
            proc = subprocess.Popen(['curl', '-b', self.cookiepath, url],
                                    stdout=subprocess.PIPE, stderr=self.null)
            out, _ = proc.communicate()
            return json.loads(out)

        # Prepare
        url = self.server + URL + res
        self.tempreset()

        # Run curl and ask for a cookie if needs be
        try:
            jsonout = curl()
        except ValueError:
            self.getcookie()
            jsonout = curl()

        # Write output
        self.temp.write(pprint.pformat(jsonout))
        return jsonout

    def run_issue(self, args):
        pprint.pprint(self.curl('/issue/AA-1234'))

    def run_versions(self, args):
        res = '/project/' + args.project
        try:
            for version in sorted(self.curl(res)['versions']):
                print version['name']
        except KeyError:
            print >> sys.stderr, args.project + ": No such project" 

    def run_version(self, args):
        # Get issues from version
        query = 'project = %s AND fixVersion = "%s"' % \
            (args.project, args.version)

        tab = prettytable.PrettyTable(["KEY",
                                       "ASSIGNEE",
                                       "REPORTER",
                                       "COMPONENTS",
                                       "VERSIONS",
                                       "STATUS",
                                      ])
        tab.align = 'l'
        tab.padding_width = 1
        tab.border = False
        for issue in self.search(query)['issues']:
            # Fields
            fields = issue['fields']

            assignee = fields['assignee']
            assignee = assignee['displayName'] if assignee else ''

            components = ' '.join([com['name'] for com in fields['components']])

            versions = ' '.join([ver['name'] for ver in fields['fixVersions']])

            reporter = fields['reporter']['displayName']

            status = fields['status']['name']

            # Add row
            tab.add_row([issue['key'],
                         assignee,
                         reporter,
                         components,
                         versions,
                         status,
                        ])
        print tab

    def search(self, query):
        return self.curl('/search?jql=' + urllib.quote(query))

    def run_components(self, args):
        res = '/project/' + args.project
        try:
            for component in sorted(self.curl(res)['components']):
                print component['name']
        except KeyError:
            print >> sys.stderr, args.project + ": No such project" 

    def run_search(self, args):
        pprint.pprint(self.search(args.jql))

def main():
    p = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    p.add_argument('-s', '--server', default='https://example.net/jira')
    args = p.parse_args()

    # CLI
    Gira(args.server).loop()

if __name__ == '__main__':
    main()
