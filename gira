#! /usr/bin/env python

import sys
import os.path
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import subprocess
import urllib
import json
import pprint
import cli
import tab

URL = '/rest/api/latest'

class Gira(cli.Cli):
    def __init__(self, server, project):
        cli.Cli.__init__(self, history=True)

        self.server = server
        self.project = project
        self.prompt = (project if project else 'gira') + '% '

        # Get a new cookie if needs be
        self.cookiepath = self.directory + '/cookie'
        if not os.path.exists(os.path.expanduser(self.cookiepath)):
            self.getcookie()

        # Arguments
        self.versionsparser.add_argument('-p', '--project')

        self.componentsparser.add_argument('-p', '--project')

        self.versionparser.add_argument('version', nargs='+')
        self.versionparser.add_argument('-p', '--project')

        self.searchparser.add_argument('jql', nargs='+')

        self.useparser.add_argument('project')

        # Sink for curl
        self.null = open(os.devnull, 'w')

    def getcookie(self):
        subprocess.call(['get-cookie', '-u',
                         self.server + '/login', '-o', self.cookiepath])

    def curl(self, res):
        def curl():
            proc = subprocess.Popen(['curl', '-b', self.cookiepath, url],
                                    stdout=subprocess.PIPE, stderr=self.null)
            out, _ = proc.communicate()
            return json.loads(out)

        # Prepare
        url = self.server + URL + res
        self.tempreset()

        # Run curl and ask for a cookie if needs be
        try:
            jsonout = curl()
        except ValueError:
            self.getcookie()
            jsonout = curl()

        # Write output
        self.temp.write(pprint.pformat(jsonout))
        return jsonout

    def run_issue(self, args):
        pprint.pprint(self.curl('/issue/AA-1234'))

    def run_versions(self, args):
        if not self.project:
            print >> sys.stderr, "Project not set"
            return

        res = '/project/' + (args.project if args.project else self.project)
        try:
            for version in sorted(self.curl(res)['versions']):
                print version['name']
        except KeyError:
            print >> sys.stderr, args.project + ": No such project"

    def run_version(self, args):
        if not self.project:
            print >> sys.stderr, "Project not set"
            return

        # Get issues from version
        query = 'project = %s AND fixVersion = "%s"' % \
            (args.project if args.project else self.project,
             ' '.join(args.version))

        rows = [["KEY",
                 "ASSIGNEE",
                 "REPORTER",
                 "COMPONENTS",
                 "VERSIONS",
                 "STATUS",
                ]]
        for issue in self.search(query)['issues']:
            # Fields
            fields = issue['fields']

            assignee = fields['assignee']
            assignee = assignee['displayName'] if assignee else ''

            components = ' '.join([com['name'] for com in fields['components']])

            versions = ' '.join([ver['name'] for ver in fields['fixVersions']])

            reporter = fields['reporter']['displayName']

            status = fields['status']['name']

            # Add row
            rows.append([issue['key'],
                         assignee,
                         reporter,
                         components,
                         versions,
                         status,
                        ])
        tab.tab(rows, spacing=2, maxw=20)

    def search(self, jql):
        return self.curl('/search?jql=' + urllib.quote(jql))

    def run_components(self, args):
        if not self.project:
            print >> sys.stderr, "Project not set"
            return

        res = '/project/' + (args.project if args.project else self.project)
        try:
            for component in sorted(self.curl(res)['components']):
                print component['name']
        except KeyError:
            print >> sys.stderr, args.project + ": No such project"

    def run_search(self, args):
        jql = ['"%s"' % word if ' ' in word else word for word in args.jql]
        pprint.pprint(self.search(' '.join(jql)))

    def run_projects(self, args):
        projects = [[prj['name'], prj['key']] for prj in self.curl('/project')]
        projects.insert(0, ["PROJECT", "KEY"])
        tab.tab(projects)

    def run_use(self, args):
        for project in self.curl('/project'):
            if args.project in (project['name'], project['key']):
                self.project = project['key']
                self.prompt = self.project + '% '
                break
        else:
            print >> sys.stderr, args.project + ": No such project"

def main():
    p = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    p.add_argument('-s', '--server', default='https://example.net/jira')
    p.add_argument('project', nargs='?')
    args = p.parse_args()

    # CLI
    Gira(args.server, args.project).loop()

if __name__ == '__main__':
    main()
