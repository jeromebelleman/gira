#! /usr/bin/env python

import sys
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import cmd
import getpass
import requests
from pprint import pprint

URL = 'rest/api/latest'

class Cli(cmd.Cmd):
    def __init__(self, auth, server):
        cmd.Cmd.__init__(self)

        self.auth = auth
        self.server = server

        self.prompt = 'gira% '

    def do_list(self, line):
        res = 'search?jql=assignee=foo'
        r = requests.get('%s/%s/%s' % (self.server, URL, res), auth=self.auth)
        print '%s/%s/%s' % (self.server, URL, res)

        try:
            content = r.json()
        except ValueError, e:
            print >>sys.stderr, e
            return
            
        for i in content['issues']:
            key = i['key']
            assignee = i['fields']['assignee']['displayName']
            summary = i['fields']['summary']
            print "%s\t%s\t%s" % (key, assignee, summary)
        print "Found %d matching issues" % content['total']

    def do_issue(self, line):
        res = 'issue/%s' % line
        print '%s/%s/%s' % (self.server, URL, res)
        r = requests.get('%s/%s/%s' % (self.server, URL, res), auth=self.auth)
        pprint(r.json())

    def do_session(self, _):
        print '%s/rest/auth/1/session' % self.server
        r = requests.post('%s/rest/auth/1/session' % self.server, auth=self.auth)
        print r.status_code
        print r.text
        r = requests.get('%s/rest/auth/1/session' % self.server, auth=self.auth)
        print r.status_code
        print r.text

    def do_version(self, _):
        res = 'issue/%s' % line
        print '%s/%s/%s' % (self.server, URL, res)
        r = requests.get('%s/%s/%s' % (self.server, URL, res), auth=self.auth)
        print r.text

    def do_EOF(self, _):
        print
        sys.exit(0)

    def help_EOF(self):
        print "Exit. You could also use Ctrl-D."

def main():
    p = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    p.add_argument('-u', '--username', default=getpass.getuser())
    p.add_argument('-p', '--password', nargs='?')
    p.add_argument('-s', '--server', default='https://example.net/jira')
    args = p.parse_args()

    if args.password:
        password = args.password
    else:
        password = getpass.getpass()

    cli = Cli((args.username, password), args.server)
    while True:
        try:
            cli.cmdloop()
        except KeyboardInterrupt:
            print

if __name__ == '__main__':
    main()
