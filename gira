#! /usr/bin/env python

import sys
import os.path
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import subprocess
import urllib
import json
import ConfigParser
import textwrap
import cli
import tab
import pprint

URL = '/rest/api/latest'

class Gira(cli.Cli):
    def __init__(self, server, project):
        cli.Cli.__init__(self, history=True)

        self.server = server
        self.project = project
        self.prompt = (project if project else 'gira') + '% '
        self.wrapper = textwrap.TextWrapper(width=80)

        # Configuration
        self.cfg = ConfigParser.SafeConfigParser()
        self.cfg.read(self.directory + '/gira.cfg')

        # Get a new cookie if needs be
        self.cookiepath = self.directory + '/cookie'
        if not os.path.exists(os.path.expanduser(self.cookiepath)):
            self.getcookie()

        # Arguments
        self.versionsparser.add_argument('-p', '--project')

        self.componentsparser.add_argument('-p', '--project')

        self.issuesparser.add_argument('-p', '--project')
        self.issuesparser.add_argument('-c', '--component')
        self.issuesparser.add_argument('-v', '--version', nargs='+')
        self.issuesparser.add_argument('-m', '--maxresults', type=int,
                                       default=50)

        self.searchparser.add_argument('jql', nargs='+')

        self.useparser.add_argument('project')

        self.issueparser.add_argument('key')

        # Sink for curl
        self.null = open(os.devnull, 'w')

    def getcookie(self):
        subprocess.call(['get-cookie', '-u',
                         self.server + '/login', '-o', self.cookiepath])

    def curl(self, res):
        def curl():
            proc = subprocess.Popen(['curl', '-b', self.cookiepath, url],
                                    stdout=subprocess.PIPE, stderr=self.null)
            out, _ = proc.communicate()
            return json.loads(out)

        # Prepare
        url = self.server + URL + res
        self.tempreset()

        # Run curl and ask for a cookie if needs be
        try:
            jsonout = curl()
        except ValueError:
            self.getcookie()
            jsonout = curl()

        # Write output
        self.temp.write(pprint.pformat(jsonout))
        return jsonout

    def run_issue(self, args):
        pprint.pprint(self.curl('/issue/AA-1234'))

    def run_versions(self, args):
        if not self.project:
            print >> sys.stderr, "Project not set"
            return

        # Query
        res = '/project/' + (args.project if args.project else self.project)
        try:
            versions = [ver['name'] for ver in self.curl(res)['versions']]
        except KeyError:
            print >> sys.stderr, args.project + ": No such project"
            return

        # Report
        for version in sorted(versions):
            print version

    def run_issues(self, args):
        if not self.project:
            print >> sys.stderr, "Project not set"
            return

        # Get issues from version
        query = 'project = %s' % \
            (args.project if args.project else self.project)
        query += ' AND component = ' + args.component if args.component else ''
        query += ' AND fixVersion = "%s"' % \
            ' '.join(args.version) if args.version else ''

        rows = [["KEY",
                 "ASSIGNEE",
                 "REPORTER",
                 "COMPONENTS",
                 "VERSIONS",
                 "STATUS",
                 "SUMMARY",
                ]]
        try:
            for issue in self.search(query, args.maxresults)['issues']:
                # Fields
                fields = issue['fields']

                asn = fields['assignee']
                asn = self.nickname(asn['displayName']) if asn else ''

                components = ' '.join([com['name']
                                       for com in fields['components']])

                versions = ' '.join([ver['name']
                                     for ver in fields['fixVersions']])

                rep = fields['reporter']
                rep = self.nickname(rep['displayName']) if rep else ''

                status = fields['status']['name']

                summary = fields['summary']

                # Add row
                rows.append([issue['key'],
                             asn,
                             rep,
                             components,
                             versions,
                             status,
                             summary,
                            ])
            tab.tab(rows, spacing=2, maxw=[None, None, None, 5, 8, 6, 26])
        except KeyError:
            pass

    def nickname(self, name):
        try:
            return self.cfg.get('nicknames', name)
        except ConfigParser.NoOptionError:
            return name

    def search(self, jql, maxresults=50):
        return self.curl('/search?jql=%s&maxResults=%d' % \
                         (urllib.quote(jql), maxresults))

    def run_components(self, args):
        if not self.project:
            print >> sys.stderr, "Project not set"
            return

        # Query
        res = '/project/' + (args.project if args.project else self.project)
        try:
            components = [comp['name'] for comp in self.curl(res)['components']]
        except KeyError:
            print >> sys.stderr, args.project + ": No such project"
            return

        # Report
        for component in sorted(components):
            print component

    def run_search(self, args):
        jql = ['"%s"' % word if ' ' in word else word for word in args.jql]
        pprint.pprint(self.search(' '.join(jql)))

    def run_projects(self, args):
        projects = [[prj['name'], prj['key']] for prj in self.curl('/project')]
        projects.insert(0, ["PROJECT", "KEY"])
        tab.tab(projects)

    def run_use(self, args):
        for project in self.curl('/project'):
            if args.project in (project['name'], project['key']):
                self.project = project['key']
                self.prompt = self.project + '% '
                break
        else:
            print >> sys.stderr, args.project + ": No such project"

    def run_issue(self, args):
        issue = self.curl('/issue/' + args.key)
        fields = issue['fields']

        # Heading
        print "%s/%s %s" % (fields['project']['name'],
                            issue['key'],
                            fields['summary'])
        print

        # Type and status
        fmt = "Type:       {0:15} Status:     {1}"
        print fmt.format(fields['issuetype']['name'],
                         fields['status']['name'])


        # Priority and resolution
        resolution = fields['resolution']
        fmt = "Priority:   {0:15} Resolution: {1}"
        print fmt.format(fields['priority']['name'],
                         resolution['name'] if resolution else '')

        # Components and versions
        compvers = enumerate(zip(fields['components'], fields['fixVersions']))
        for i, (component, version) in compvers:
            if i == 0:
                fmt = "Components: {0:15} Versions:   {1}"
            else:
                fmt = "            {0:15}             {1}"
            print fmt.format(component['name'], version['name'])

        # Creation date and security
        fmt =  "Created:    {0:15} Security:   {1}"
        print fmt.format(fields['created'][:10], fields['security']['name'])

        # Update date and assignee
        asn = fields['assignee']
        asn = self.nickname(asn['displayName']) if asn else ''
        fmt =  "Updated:    {0:15} Assignee:   {1}"
        print fmt.format(fields['updated'][:10], asn)

        # Resolution date and reporter
        resdate = fields['resolutiondate']
        fmt =  "Resolved:   {0:15} Reporter:   {1}"
        print fmt.format(resdate[:10] if resdate else '',
                         self.nickname(fields['reporter']['displayName']))
        print

        # Description
        print "Description:"
        if fields['description']:
            print self.wrapper.fill(fields['description'])
        print

        # Comments
        print "Comments:"
        print
        for comment in fields['comment']['comments']:
            print '%s, %s:' % (self.nickname(comment['author']['displayName']),
                               comment['updated'][:10])
            print self.wrapper.fill(comment['body'])
            print

def main():
    # Arguments
    p = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    p.add_argument('-s', '--server', default='https://example.net/jira')
    p.add_argument('project', nargs='?')
    args = p.parse_args()

    # CLI
    Gira(args.server, args.project).loop()

if __name__ == '__main__':
    main()
